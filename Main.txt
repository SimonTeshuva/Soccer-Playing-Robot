import java.io.IOException;

import lejos.nxt.Button;
import lejos.nxt.ButtonListener;
import lejos.nxt.LCD;

public class Main {

	public static final int NUM_OF_READINGS_TO_AVG = 3;
	public static int goalsKicked = 0;
	public static boolean goal;
	public static int hits = 0;
	public static void main(String[] args) throws IOException {


		// Make ESCAPE button cause the program to exit
		Button.ESCAPE.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				System.exit(1);
			}

			public void buttonReleased(Button b) {

			}
		});

		LCD.drawString("Press ENTER", 5, 7);
		Button.ENTER.waitForPressAndRelease(); // Wait until ENTER is pressed


		SoccerPlayerRobot robot;
		boolean justStarted = true;
		
		while(goalsKicked < 3){
			robot = new SoccerPlayerRobot();
			if (justStarted){
			robot.mClawThread.startAngle();
			justStarted = false;
			}
			goal = robot.goPlay(hits);
			// need the claw to go the the right angle after each iteration
			if(goal){
				goalsKicked++;
				robot.returnToStart();
			}

		}

	}

	public static boolean consistentArray(int[] array) {
		for (int i = 0; i < array.length - 1; i++) {
			if (array[i] == Integer.MAX_VALUE || array[i+1] != array[i]) {
				return false;
			}
		}
		return true;
	}

	public static boolean consistentArray(float[] array) {
		for (int i = 0; i < array.length - 1; i++) {
			if (array[i] == Float.MAX_VALUE || array[i+1] != array[i]) {
				return false;
			}
		}
		return true;
	}

	public static void show(String string) {
		LCD.clear();
		LCD.drawString(string, 5, 5);
	}	

	public static void show(int number) {
		LCD.clear();
		LCD.drawInt(number, 5, 5);
	}

	public static void show(int[] numbers) {
		int x=0, y=0;

		LCD.clear();

		for (int number : numbers) {
			LCD.drawInt(number, x, y);

			y++;

		}
	}

}
